#BlueJ class context
comment0.params=
comment0.target=Enemy()
comment1.params=level
comment1.target=Enemy(int)
comment10.params=
comment10.target=boolean\ canSeePlayer()
comment11.params=destX\ destY
comment11.target=boolean\ canSeePoint(int,\ int)
comment12.params=startX\ startY\ destX\ destY
comment12.target=boolean\ pointsMeet(int,\ int,\ int,\ int)
comment13.params=
comment13.target=double\ distanceToPlayer()
comment13.text=public\ void\ moveToDefault(){\n\ \ \ \ \ \ \ \ int\ destX\=defaultPath[curDefault][0];\n\ \ \ \ \ \ \ \ int\ destY\=\ defaultPath[curDefault][1];\n\n\ \ \ \ \ \ \ \ boolean\ needPath\ \=\ \!canSeePoint(destX,\ destY);\n\ \ \ \ \ \ \ \ System.out.println("Need\ path\:\ "+needPath);\n\ \ \ \ \ \ \ \ if(needPath\ &&\ \!hasPath){\n\ \ \ \ \ \ \ \ \ \ \ \ pathToFollow\ \=\ pathFind(getX(),getY(),destX,destY);\n\ \ \ \ \ \ \ \ \ \ \ \ //System.out.println("length\ of\ path\:\ "+pathToFollow.length);\n\n\ \ \ \ \ \ \ \ \ \ \ \ hasPath\ \=true;\n\ \ \ \ \ \ \ \ \ \ \ \ curPath\ \=0;\n\ \ \ \ \ \ \ \ }else\ if(\!needPath){\n\ \ \ \ \ \ \ \ \ \ \ \ hasPath\ \=\ false;\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ if(\!needPath){\n\ \ \ \ \ \ \ \ \ \ \ \ turnTowards(destX,destY\ );\n\ \ \ \ \ \ \ \ \ \ \ \ move(speed);\n\ \ \ \ \ \ \ \ \ \ \ \ moving\ \=\ true;\n\ \ \ \ \ \ \ \ \ \ \ \ //System.out.println(getX()+"\ "\ +\ getY());\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (Math.abs(getX()\ -\ defaultPath[curDefault][0])\ <\=3\ &&\ Math.abs(getY()\ -\ defaultPath[curDefault][1])\ <\=3){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curDefault++;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ (curDefault\ >\=\ defaultPathLength){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curDefault\ \=0;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }else{\ //need\ path\ is\ true\n\n\ \ \ \ \ \ \ \ \ \ \ \ //follow\ the\ path\n\ \ \ \ \ \ \ \ \ \ \ \ turnTowards(pathToFollow[curPath][0],pathToFollow[curPath][1]\ );\n\ \ \ \ \ \ \ \ \ \ \ \ //setLocation(pathToFollow[curPath][0],pathToFollow[curPath][1]\ );\n\ \ \ \ \ \ \ \ \ \ \ \ move(speed);\n\ \ \ \ \ \ \ \ \ \ \ \ moving\ \=\ true;\n\ \ \ \ \ \ \ \ \ \ \ \ //System.out.println(getX()+"\ "\ +\ getY());\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (Math.abs(getX()\ -\ pathToFollow[curPath][0])\ <\=3\ &&\ Math.abs(getY()\ -\ pathToFollow[curPath][1])\ <\=3){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curPath++;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(curPath\ >\=\ pathToFollow.length){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curPath\ \=0;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\n}
comment2.params=
comment2.target=void\ act()
comment2.text=\n\ Act\ -\ do\ whatever\ the\ Player\ wants\ to\ do.\ This\ method\ is\ called\ whenever\n\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\n
comment3.params=
comment3.target=void\ controlDeath()
comment4.params=
comment4.target=void\ controlMovement()
comment5.params=
comment5.target=void\ controlWeapons()
comment6.params=d
comment6.target=void\ damage(int)
comment7.params=speed
comment7.target=void\ move(int)
comment8.params=startX\ startY\ destX\ destY
comment8.target=int[][]\ pathFind(int,\ int,\ int,\ int)
comment9.params=destX\ destY\ depth
comment9.target=void\ recursivePathFind(int,\ int,\ int)
numComments=14
